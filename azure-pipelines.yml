trigger:
  branches:
    include:
    - '*'

variables:
  python.version: 3.6
  llvm.version: '7.0.1' # Note: LLVM 8.0.0 fails to build the optimized libint
  mkl.version: '2019.1'
  conda.build: false
  conda.build_type: Debug

jobs:

  # Configure, build, install, and test job
  - job: 'build'
    pool:
      vmImage: 'vs2015-win2012r2'
    timeoutInMinutes: 360
    steps:

      # Install Chocolatey (https://chocolatey.org/install#install-with-powershellexe)
      - powershell: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          Write-Host "##vso[task.setvariable variable=PATH]$env:PATH"
          choco --version
        displayName: "Install Chocolatey"

      # Install Miniconda
      - script: |
          choco install miniconda3 --yes
          set PATH=C:\tools\miniconda3\Scripts;C:\tools\miniconda3;C:\tools\miniconda3\Library\bin;%PATH%
          echo '##vso[task.setvariable variable=PATH]%PATH%'
          set LIB=C:\tools\miniconda3\Library\lib;%LIB%
          echo '##vso[task.setvariable variable=LIB]%LIB%'
          conda --version
        displayName: "Install Miniconda"

      # Configure Miniconda
      - script: |
          conda config --set always_yes yes
          conda config --append channels conda-forge
          conda config --append channels psi4
          conda info
        displayName: "Configure Miniconda"

      # Create conda enviroment
      # Note: conda activate doesn't work here, because it creates a new shell!
      #                  mkl-devel=%MKL_VERSION% ^
      - script: |
          conda install cmake ^
                        conda-build ^
                        conda-verify ^
                        ninja ^
                        numpy ^
                        pybind11 ^
                        python=%PYTHON_VERSION%
          conda list
        displayName: "Install conda packages"

      # Install LLVM
      # Note: LLVM distributed by conda is too old
      - script: |
          choco install llvm --version %LLVM_VERSION% --yes
          set PATH=C:\Program Files\LLVM\bin;%PATH%
          echo '##vso[task.setvariable variable=PATH]%PATH%'
          clang-cl --version
        displayName: "Install LLVM"
        
      # Build the MDI Library
      - script: | 
          call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
          ls
          cd lib
          echo "Contents of lib"
          ls
          mkdir mdi_build
          cd mdi_build
          echo "Contents of ../mdi"
          ls ../mdi
          echo "Calling cmake"
          cmake -G Ninja ^
                -DCMAKE_BUILD_TYPE=%CMAKE_BUILD_TYPE% ^
                -DCMAKE_C_COMPILER=clang-cl ^
                -DCMAKE_CXX_COMPILER=clang-cl ^
                -Dlanguage=Python ^
                ../mdi
          cmake --build . ^
                --config %CMAKE_BUILD_TYPE%
          ls
          ls *
        displayName: "Building the MDI Library"
        
      # Build the socket_timings code
      - script: |
          echo "Contents of current directory:"
          ls
          echo "End of contents of current directory"
          mkdir build
          cd build
          echo "Contents of upper directory"
          ls ../
          cmake -DCMAKE_C_COMPILER=clang-cl ^
                -DCMAKE_CXX_COMPILER=clang-cl ^
                -Dlanguage=Python ^
                ../socket_timings
          cmake --build . ^
                --target mpi_driver
          cmake --build . ^
                --target mpi_production
          ls
          ls *
        displayName: "Building the socket_timings code"

      # Test the socket_timings code
      - script: |
          echo "Contents of current directory:"
          ls
          echo "End of contents of current directory"
          cd build
          echo "Contents of current directory"
          ls
          pythonw.exe driver.py -mdi "-role DRIVER -name driver -method TCP -port 8021 -out dout"
          pythonw.exe production.py -mdi "-role ENGINE -name PONG -method TCP -hostname localhost -port 8021 -out pout"
	  echo "============== dout"
	  cat dout
	  echo "============== pout"
	  cat pout
          timeout 5
        displayName: "Test the socket_timings code"
